{
  "_args": [
    [
      {
        "raw": "ethereumjs-tx@github:kejace/ethereumjs-tx",
        "scope": null,
        "escapedName": "ethereumjs-tx",
        "name": "ethereumjs-tx",
        "rawSpec": "github:kejace/ethereumjs-tx",
        "spec": "github:kejace/ethereumjs-tx",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:kejace/ethereumjs-tx.git",
          "sshUrl": "git+ssh://git@github.com/kejace/ethereumjs-tx.git",
          "httpsUrl": "git+https://github.com/kejace/ethereumjs-tx.git",
          "gitUrl": "git://github.com/kejace/ethereumjs-tx.git",
          "shortcut": "github:kejace/ethereumjs-tx",
          "directUrl": "https://raw.githubusercontent.com/kejace/ethereumjs-tx/master/package.json"
        }
      },
      "D:\\Programming_BlocApps\\node_modules\\eth-lightwallet"
    ]
  ],
  "_from": "kejace/ethereumjs-tx",
  "_id": "ethereumjs-tx@0.6.7",
  "_inCache": true,
  "_installable": true,
  "_location": "/ethereumjs-tx",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ethereumjs-tx@github:kejace/ethereumjs-tx",
    "scope": null,
    "escapedName": "ethereumjs-tx",
    "name": "ethereumjs-tx",
    "rawSpec": "github:kejace/ethereumjs-tx",
    "spec": "github:kejace/ethereumjs-tx",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:kejace/ethereumjs-tx.git",
      "sshUrl": "git+ssh://git@github.com/kejace/ethereumjs-tx.git",
      "httpsUrl": "git+https://github.com/kejace/ethereumjs-tx.git",
      "gitUrl": "git://github.com/kejace/ethereumjs-tx.git",
      "shortcut": "github:kejace/ethereumjs-tx",
      "directUrl": "https://raw.githubusercontent.com/kejace/ethereumjs-tx/master/package.json"
    }
  },
  "_requiredBy": [
    "/eth-lightwallet"
  ],
  "_resolved": "git://github.com/kejace/ethereumjs-tx.git#83592c7b52802a50cbdf83c40319e8defb56a6fe",
  "_shasum": "4e7c0032e2949d83d6feb6196f5259bca5a1fd7f",
  "_shrinkwrap": null,
  "_spec": "ethereumjs-tx@github:kejace/ethereumjs-tx",
  "_where": "D:\\Programming_BlocApps\\node_modules\\eth-lightwallet",
  "author": {
    "name": "mjbecze",
    "email": "mb@ethdev.com"
  },
  "browser": {
    "secp256k1": "secp256k1-browserify"
  },
  "bugs": {
    "url": "https://github.com/ethereum/ethereumjs-tx/issues"
  },
  "dependencies": {
    "browserify-sha3": "",
    "ethereum-common": "0.0.10",
    "ethereumjs-util": "github:kejace/ethereumjs-util",
    "secp256k1-browserify": "0.0.0"
  },
  "description": "An simple module for creating, manipulating and signing ethereum transactions",
  "devDependencies": {
    "async": "^1.4.2",
    "ethereumjs-testing": "git+https://github.com/wanderer/ethereumjs-testing.git",
    "minimist": "^1.2.0",
    "standard": "^5.2.2",
    "tape": "^4.0.3"
  },
  "gitHead": "83592c7b52802a50cbdf83c40319e8defb56a6fe",
  "homepage": "https://github.com/ethereum/ethereumjs-tx#readme",
  "keywords": [
    "ethereum",
    "transactions"
  ],
  "license": "MPL-2.0",
  "main": "index.js",
  "name": "ethereumjs-tx",
  "optionalDependencies": {},
  "readme": "# SYNOPSIS \r\n [![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard) [![Build Status](https://travis-ci.org/ethereum/ethereumjs-tx.svg)](https://travis-ci.org/ethereum/ethereumjs-tx)   \r\nA simple module for creating, manipulating and signing Ethereum transactions. \r\n\r\n# CONTACT\r\n [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/ethereum/ethereumjs-lib?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge) or #ethereumjs on freenode\r\n\r\n# INSTALL\r\n`npm install ethereumjs-tx`\r\n\r\n# USAGE\r\n\r\n  - [example](https://github.com/ethereum/ethereumjs-tx/blob/master/examples/transactions.js)\r\n\r\n```javascript\r\nvar Tx = require('ethereumjs-tx');\r\nvar privateKey = new Buffer('e331b6d69882b4cb4ea581d88e0b604039a3de5967688d3dcffdd2270c0fd109', 'hex');\r\n\r\nvar rawTx = {\r\n  nonce: '0x00',\r\n  gasPrice: '0x09184e72a000', \r\n  gasLimit: '0x2710',\r\n  to: '0x0000000000000000000000000000000000000000', \r\n  value: '0x00', \r\n  data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057'\r\n};\r\n\r\nvar tx = new Tx(rawTx);\r\ntx.sign(privateKey);\r\n\r\nvar serializedTx = tx.serialize();\r\n\r\n```\r\n\r\n# BROWSER  \r\nFor standalone use in the browser inculde [./dist/ethereumjs-tx.js](https://github.com/ethereum/ethereumjs-tx/blob/master/dist/ethereumjs-tx.js)  \r\nThis will give you a gobal varible `EthTx` to use. It will also create the globals `Buffer` and `ethUtil`  \r\nTo build for standalone use in the browser install `browserify` and run `npm run build`.\r\n\r\n# API\r\n - [`new Transaction([data])`](#new-transactiondata)\r\n - [`Transaction` Properties](#transaction-properties)\r\n - [`Transaction` Methods](#transaction-methods)\r\n  - [`transaction.serialize()`](#transactionserialize) \r\n  - [`transaction.hash([signature])`](#transactionhashsignature)\r\n  - [`transaction.sign(privateKey)`](#transactionsignprivatekey)\r\n  - [`transaction.getSenderAddress()`](#transactiongetsenderaddress)\r\n  - [`transaction.getSenderPublicKey()`](#transactiongetsenderpublickey)\r\n  - [`transaction.validate()`](#transactionvalidate)\r\n  - [`transaction.validateSignature()`](#transactionvalidatesignature)\r\n  - [`transaction.getDataFee()`](#transactiongetdatafee)\r\n  - [`transaction.getBaseFee()`](#transactiongetbasefee)\r\n  - [`transaction.getUpfrontCost()`](#transactiongetupfrontcost)\r\n  - [`transaction.toJSON([object])`](#transactiontojsonobject)\r\n\r\n### `new Transaction([data])`\r\nCreates a new transaction object\r\n- `data` - a transaction can be initiailized with either a `buffer` containing the RLP serialized transaction or an `array` of buffers relating to each of the tx Properties, listed in order below.  For example.\r\n```javascript\r\nvar rawTx = {\r\n  nonce: '00',\r\n  gasPrice: '09184e72a000', \r\n  gasLimit: '2710',\r\n  to: '0000000000000000000000000000000000000000', \r\n  value: '00', \r\n  data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',\r\n  v: '1c', \r\n  r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',\r\n  s '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'\r\n};\r\n\r\nvar tx = new Transaction(rawTx);\r\n```\r\nOr lastly an `Object` containing the Properties of the transaction like in the [Usage](#usage) example\r\n\r\nFor `Object` and `Arrays` each of the elements can either be a `Buffer`, hex `String` , `Number`, or an object with a `toBuffer` method such as `Bignum`\r\n\r\n### `transaction` Properties\r\n- `raw` - The raw rlp decoded transaction.\r\n- `nonce` \r\n- `to` - the to address\r\n- `value` - the amount of ether sent\r\n- `data` - this will contain the `data` of the message or the `init` of a contract.\r\n- `v` - EC signature parameter\r\n- `r` - EC signature parameter\r\n- `s` - EC recovery ID\r\n\r\n--------------------------------------------------------\r\n\r\n### `Transaction` Methods\r\n\r\n#### `transaction.serialize()`\r\nReturns the RLP serialization of the transaction  \r\n**Return:** 32 Byte `Buffer`\r\n\r\n--------------------------------------------------------\r\n\r\n#### `transaction.hash([signature])`\r\nReturns the SHA3-256 hash of the rlp transaction  \r\n**Parameters**  \r\n- `signature` - a `Boolean` determining if to include the signature components of the transaction. Defaults to true. \r\n\r\n**Return:** 32 Byte `Buffer`\r\n\r\n--------------------------------------------------------\r\n\r\n#### `transaction.sign(privateKey)`\r\nSigns the transaction with the given privateKey.  \r\n**Parameters**  \r\n- `privateKey` - a 32 Byte `Buffer`\r\n\r\n--------------------------------------------------------\r\n\r\n#### `transaction.getSenderAddress()`\r\nReturns the senders address  \r\n**Return:** 20 Byte `Buffer`\r\n\r\n--------------------------------------------------------\r\n\r\n#### `transaction.getSenderPublicKey()`\r\nreturns the public key of the  sender  \r\n**Return:** `Buffer`\r\n\r\n--------------------------------------------------------\r\n\r\n#### `transaction.validate()`\r\nDetermines if the transaction is schematicly valid by checking its signature and gasCost.  \r\n**Return:** `Boolean` \r\n\r\n--------------------------------------------------------\r\n\r\n#### `transaction.validateSignature()`\r\nDetermines if the signature is valid  \r\n**Return:** `Boolean` \r\n\r\n--------------------------------------------------------\r\n\r\n#### `transaction.getDataFee()`\r\nReturns the amount of gas to be paid for the data in this transaction  \r\n**Return:** `bn.js` \r\n\r\n--------------------------------------------------------\r\n\r\n#### `transaction.getBaseFee()`\r\nReturns the minimum amount of gas the tx must have (DataFee + TxFee)  \r\n**Return:** `bn.js` \r\n\r\n--------------------------------------------------------\r\n\r\n#### `transaction.getUpfrontCost()`\r\nThe total amount needed in the account of the sender for the transaction to be valid  \r\n**Return:** `bn.js` \r\n\r\n--------------------------------------------------------\r\n\r\n#### `transaction.toJSON([object])`\r\nReturns transaction as JSON  \r\n**Parameters**  \r\n- `object` - a `Boolean` that defaults to false. If `object` is true then this will return an object else it will return an `array`  \r\n\r\n**Return:** `Object` or `Array`\r\n\r\n# TESTS\r\ntest uses mocha. To run  \r\n`npm test`\r\n\r\n# LICENSE\r\n[MPL-2.0](https://tldrlegal.com/license/mozilla-public-license-2.0-(mpl-2))\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ethereum/ethereumjs-tx.git"
  },
  "scripts": {
    "build": "browserify --s EthTx index.js > ./dist/ethereumjs-tx.js",
    "test": "standard ./index.js ./test/*.js && node ./test/tester -a"
  },
  "testling": {
    "browsers": [
      "ie/9..latest",
      "firefox/15..latest",
      "chrome/22..latest"
    ],
    "files": [
      "test/transactions.js"
    ]
  },
  "version": "0.6.7"
}
